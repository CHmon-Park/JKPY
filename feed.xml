<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://chmon-park.github.io/JKPY//JKPY/</id><title>JKPY Blog</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-03-13T14:58:55+09:00</updated> <author> <name>JKPY</name> <uri>https://chmon-park.github.io/JKPY//JKPY/</uri> </author><link rel="self" type="application/atom+xml" href="https://chmon-park.github.io/JKPY//JKPY/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://chmon-park.github.io/JKPY//JKPY/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 JKPY </rights> <icon>/JKPY/assets/img/favicons/favicon.ico</icon> <logo>/JKPY/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Sort</title><link href="https://chmon-park.github.io/JKPY//JKPY/posts/study-sort/" rel="alternate" type="text/html" title="Sort" /><published>2022-03-10T00:00:00+09:00</published> <updated>2022-03-10T23:42:00+09:00</updated> <id>https://chmon-park.github.io/JKPY//JKPY/posts/study-sort/</id> <content src="https://chmon-park.github.io/JKPY//JKPY/posts/study-sort/" /> <author> <name>CH</name> </author> <category term="Sort" /> <summary> O(n^2) Sort Selection Sort 가장 단순한 정렬 방법. 배열의 요소 n개를 모두 조회하여 가장 크거나 작은 원소를 찾고 해당 원소를 마지막 인덱스의 원소와 바꾼다. 이후 마지막 원소를 제외한 n-1 길이의 배열을 가지고 앞선 과정을 재차 거치며 전체 배열을 정렬하게 된다. 배열의 요소들을 비교하는 총 횟수는 n(n-1)/2 이며, 수행 시간은 모든 경우에 O(n^2)이다. 간소화된 코드 selectionSort(A[], n) // A[1...n] 을 정렬 { for last &amp;lt;- n downto 2 { k &amp;lt;- theLargest(A, last); // A[1...last] 중 가장 큰 수 A[k] 찾기 A[k]... </summary> </entry> <entry><title>DAT</title><link href="https://chmon-park.github.io/JKPY//JKPY/posts/study-DAT/" rel="alternate" type="text/html" title="DAT" /><published>2022-03-10T00:00:00+09:00</published> <updated>2022-03-10T23:42:00+09:00</updated> <id>https://chmon-park.github.io/JKPY//JKPY/posts/study-DAT/</id> <content src="https://chmon-park.github.io/JKPY//JKPY/posts/study-DAT/" /> <author> <name>JKPY</name> </author> <category term="Sort" /> <summary> DAT(Direct Address Table) DAT란 해시 테이블의 일종으로, 한 테이블의 키 값을 주소로 사용하는 테이블을 말한다. for 문을 돌려 배열을 탐색하는 것보다 빠르고 효율적으로 탐색을 진행할 수 있다. 속도가 빠르나, 값이 index로 쓰이기에 지나치게 인덱스가 크거나 인덱스가 음수로 가는 경우에는 사용하기 어려우며, 사용할 키값이 문자열일 경우에도 사용이 어렵다. 위의 맹점을 보완하기 위해 사용하는 방법은 다른 hash table(dictionary같이 key:value 구조를 갖는 것)이나 binary search tree가 있다. C++ 예시 코드 #include &amp;lt;iostream&amp;gt; using namespace std; int mai... </summary> </entry> </feed>
